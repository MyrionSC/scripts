# preferred shebang:
#!/usr/bin/env bash

# ----- if
if [ $COND ]; then
        # code
else
        # code
fi

# if shorthand
[ -z "$ARG" ] && return # return if $ARG is empty

# ----- common conditionals
[ -n "$1" ] # true if arg1 exists
[ -z "$1" ] # true if arg1 does not exist or is empty
[ ! -z "$1" ] # true if arg exists and is not empty
[ -f "$FILE" ] # true if file exists
[ "$1" == "first" ] # true if arg1 equals the string "first"
[ ! $COND ] # false if $COND is true
[ $COND1 && $COND2 ] # true if $COND1 and $COND2 is true
[ $COND1 || $COND2 ] # true if either $COND1 or $COND2 is true
[ "$#" -ne 1 ] # true if number of arguments not equal to 1
[ "$#" -eq 1 ] # true if number of arguments equal to 1

arithmetic operators: -eq, -ne, -lt, -le, -gt, -ge

# if contains
STR='GNU/Linux is an operating system'
SUB='Linux'
if [[ "$STR" == *"$SUB"* ]]; then
  echo "It's there."
fi

# count number of lines in var VAR
echo -n "$VAR" | grep -c '^'

# chaining cheatsheet (from https://askubuntu.com/questions/334994/which-one-is-better-using-or-to-execute-multiple-commands-in-one-line)
A; B    # Run A and then B, regardless of success of A
A && B  # Run B if and only if A succeeded
A || B  # Run B if and only if A failed
A &     # Run A in background.

# ----- arguments
$1 # first argument
$@ # all arguments
${@:2} # all arguments except first

# ------ for
for (( c=1; c<=5; c++ ))
do
   echo "Welcome $c times"
done

# online eternal
for ((;;)) do sleep 1s; date; done

# loop through files in dir and remove extension
for f in *; do
    base={f%.*}
    echo $base;
done

# ----- foreach
for file in *
do
  echo "$file"
done


# if running a script from keyboard shortcut, ensure that all necessary libs are in path by having below in top of file
LD_LIBRARY_PATH="/usr/local/lib" # or whereever the lib files are
export LD_LIBRARY_PATH

# redirects docs
"> file" means redirect stdout to file. stout is meant because it is the default stream when none is specified by number.
"2> file" means redirect stderr to file
">&2" means redirect stdout to stderr (default stream)
"1>&2" means redirect stdout to stderr
"2>&1" means redirect stderr to stdout
"&> file" means redirect stdout and stderr to file, however this only works in newer shells, like bash 4 onwards
"> /dev/null 2>&1" hide every output
"&> /dev/null" hide every output (bash 4+)

bash creates 3 streams when calling command: stdin, stdout and stderr
- stdin is input to function. It can be captured in variable: var=$(cat)
- stdout is where data is going
- stderr is any errors produced by script

# hidden chars (like lineendings)
- print hidden chars: echo $var | cat -v
- remove hidden chars: echo $var | tr -d 'HIDDEN_VAR' # fx.

sed -e 's/^.//' -e 's/.$//' # remove first and last char from string piped in
USERPROFILE=$(cmd.exe /c echo %USERPROFILE% | sed 's/\r//') # remove newline


# bind
- bind help: bind --help
- see currently bound functions: bind -P
- bind function func to ctrl-e: bind '"\C-e": func'

# test if file exists
if [ -f /tmp/foo.txt ]; then
    echo "File exists!"
fi
shorthand file not exists: [ ! -f /tmp/foo.txt ] && echo "File not found!"
more checks here: https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html

# test if dir does not exist
if [ ! -d $USERPROFILE\\cache ]; then
    echo folder does not exist
fi
shorthand to create dir (and parents) if not exists: mkdir -p /path/to/dir

# get path of current script
SCRIPTPATH=$(realpath $(dirname $0))

# generate 10 random numbers in range 1-100000
shuf -i 1-100000 -n 10

# confirm something
read -r -p "Are you sure? [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
then
    do_something
else
    do_something_else
fi

