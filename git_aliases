#!/usr/bin/env bash

# consider ~/.gitconfig with some aliases like so:
#[alias]
#	co = checkout
#	ci = commit
#	rb = rebase

# if in windows part of filesystem in WSL, use windows git
# Remember to have symlink of .ssh (see windows docs)
git() {
  if $(pwd -P | grep -q "^\/mnt\/c\/*"); then
    git.exe "$@"
  else
    command git "$@"
  fi
}

# get actual name of develop branch (xargs just trims)
git_develop() {
    git branch | grep "  develop" | xargs
}

alias ga='git add'
alias gaa='git add --all :/'
alias gapa='git add --patch'
alias gau='git add --update'

alias gb='git branch'
alias gba='git branch -a'
alias gbd='git branch -d'
alias gbnm='git branch --no-merged'
alias gbr='git branch --remote'
alias gbdl='git branch -D' #delete local
alias gbdr='git push origin --delete' # delete remote arg1=branchname

alias gbl='git blame -b -w'
alias gbs='git bisect'
alias gbsb='git bisect bad'
alias gbsg='git bisect good'
alias gbsr='git bisect reset'
alias gbss='git bisect start'

alias gc='git commit'
alias gcs='git commit -S'
alias gcv='git commit -v'
alias gc!='git commit -v --amend'
alias gcn!='git commit -v --no-edit --amend'
alias gca='git commit -v -a'
alias gca!='git commit -v -a --amend'
alias gcan!='git commit -v -a --no-edit --amend'
alias gcans!='git commit -v -a -s --no-edit --amend'
alias gcm='git commit -m'
alias gcam='git commit -m'
alias gcsm='git commit -s -m'

alias gcf='git config --list'
alias gcl='git clone --recursive'

#alias gcleanf='git clean -fd' # remove untracked files. git clean -n to see what is removed before remove
#alias gcleann='git clean -n' # remove untracked files dry-run
gclean() {
    git clean -dn
    read -p "delete shown files and dirs? [y/n]" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git clean -fd
    fi
}

alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'

alias gco='git checkout'
alias gcb='git checkout -b'
#alias gcob='git checkout -b'
alias gcom='git checkout master || git checkout main'
#alias gcod='git checkout develop 2>/dev/null || git checkout development'
alias gcod='git checkout $(git_develop)'
alias gcol='git checkout @{-1}' #checkout previous branch
alias gcop='git checkout @{-1}' #checkout previous branch
gcob() { # create branch while replacing stuff
    git checkout -b $(echo "$@" | tr " " "-" | tr -d ":")
}
gsw() { # checkout local branch
    if [ "$#" -gt 0 ]; then
        git checkout $(git branch | fzf --height 15 --query "$@")
    else
        git checkout $(git branch | fzf --height 15)
    fi
}
alias gcog="gsw"
gswr() { # checkout remote branch
    git checkout $(git branch -r | sed 's/^ *origin\///' | fzf --height 30)
}

gcolog() {
    git checkout $(git log --oneline | fzf | awk '{print $1}')
}
gccp() { # copy commit hash
    COMMIT_TO_COPY=$(git log --oneline | fzf | awk '{print $1}')
    echo copied $COMMIT_TO_COPY to clipholder
    echo $COMMIT_TO_COPY | clip
}
alias gcpc='gccp'

gback () { # go back in log
    if [ "$#" -eq 1 ]; then
        git checkout HEAD~$1
    else
        git checkout HEAD~1
    fi
}
alias gswb='git switch -'

#git revert <commit_hash> # revert single commit

#git revert <oldest_commit_hash>..<latest_commit_hash> # revert range of commits
#git revert --no-commit <hash>..HEAD # revert from head until commit hash
#git checkout HASH -- file1/to/revert file2/to/revert # revert files to commit with HASH

alias gd='git diff'
alias gdno='git diff --name-only'
alias gdca='git diff --cached'
alias gdct='git describe --tags `git rev-list --tags --max-count=1`'
alias gdt='git diff-tree --no-commit-id --name-only -r'
alias gdw='git diff --word-diff'
alias gdi='git diff --no-index' # compare files outside git

alias gf='git fetch'
alias gfa='git fetch --all --prune'
alias gfo='git fetch origin'

alias gg='git gui citool'
alias gga='git gui citool --amend'

cur_br() {
	echo "$(git symbolic-ref --short -q HEAD)";
}

ggu() {
  [[ "$#" != 1 ]] && local b=$(cur_br)
  git pull --rebase origin "${b:=$2}"
}

alias ggpur='ggu'

alias ggpull='git pull origin $(cur_br)'
alias ggpush='git push origin $(cur_br)'

# alias ggpush='git push origin $(cur_br) |& tee ~/.cache/gitpush-out.txt'

# alias ggsup='git branch --set-upstream-to=origin/$(cur_br)'
# alias ggpup='git push --set-upstream origin $(cur_br)'

alias ggpup='git push origin $(cur_br) |& tee ~/.cache/gitpush-out.txt && git branch --set-upstream-to=origin/$(cur_br) |& tee -a ~/.cache/gitpush-out.txt'
alias ggpup='git push origin $(cur_br) |& tee ~/.cache/gitpush-out.txt && git branch --set-upstream-to=origin/$(cur_br) |& tee -a ~/.cache/gitpush-out.txt'

alias ghh='git help'

alias gl='git pull'

alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glgg='git log --graph'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glo='git log --oneline --decorate'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias gdf='git log -p [--follow] [-1]'

alias gm='git merge'
alias gmom='git merge origin/master'
alias gmt='git mergetool --no-prompt'
alias gmtvim='git mergetool --no-prompt --tool=vimdiff'
alias gmum='git merge upstream/master'
alias gma='git merge --abort'
alias gmab='git merge --abort'
alias gmp='git merge @{-1}' #merge previous branch
alias gml='git merge @{-1}' #merge previous branch
alias gmlo='git pull origin @{-1}' #fetch origin of last branch and merge to current
alias gmrd='git fetch origin $(git_develop) && git merge origin/$(git_develop)' # merge with remote develop
alias grbrd='git fetch origin $(git_develop) && git rebase origin/$(git_develop)' # rebase with remote develop

# merge with remote branch $1
gmr () {
    git fetch origin/$1 && git merge origin/$1
}

alias gp='git push'
alias gpd='git push --dry-run'
alias gpu='git push upstream'
alias gpv='git push -v'

alias gra='git remote add'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbi='git rebase -i'
alias grbm='git rebase master'
alias grbd='git rebase $(git_develop)'
alias grbs='git rebase --skip'
alias grbl='git rebase @{-1}'
alias grbp='git rebase @{-1}'

# To rename / delete multiple local commits
# git rebase -i HEAD~X # where X is number of commits back to edit
grewrite() {
    git rebase -i HEAD~$1
}
grebase() {
    git rebase -i HEAD~$1
}

alias gr='git reset'
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'
alias gr1c='git reset HEAD~1' # Remove one commit that has not been pushed to remote. If you want to remove more I presume change 1 -> X
alias grac='git reset HEAD~' # Remove all commits that has not been pushed to remote.


gresetorigin() {
    read -p "reset to origin? Local commits / changes will be lost [y/n]" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        git reset --hard "origin/$(cur_br)"
    fi
}


alias grmv='git remote rename'
alias grrm='git remote remove'
alias grset='git remote set-url'
alias gru='git reset --'
alias grup='git remote update'
alias grv='git remote -v'
alias grorigin='git reset --hard origin/$(cur_br)' # delete all local commits on branch
alias gpristine='git reset --hard && git clean -dfx'
alias guncommit='git reset HEAD^'
alias grfile='git checkout --' # first arg: filename
gcofile() {
    git checkout $1 -- ${@:2}
} # checkout files from branch. arg1 is branch, rest are files
# to checkout file from commit: git checkout COMMITHASH FILE


# git show: use git show COMMIT to see commit changes
gsh() {
    SHOW_COMMIT=$(git log --format="%C(auto)%h %s (%ae, %aI)" | fzf --no-sort --height 30 | awk '{print $1}')
    git show $SHOW_COMMIT
}
alias gshow='gsh'

alias gsb='git status -sb'
alias gss='git status -s'
alias gs='git status'
alias gst='git status'
alias st='git status' # so many mistakes...

alias gsta='git stash save'
alias gstaa='git stash apply'
alias gstac='git stash clear'
alias gstad='git stash drop'
alias gstal='git stash list'
# alias gstap='git stash pop'
gstap () {
	if [ $# -eq 0 ]
	then
        git stash pop
	else
        git stash pop stash{$1}
	fi
}
gstas () {
    STASH_TO_SHOW=$(git stash list | fzf)
    if [ ! -z "$STASH_TO_SHOW" ]; then
        git stash show $(echo $STASH_TO_SHOW | cut -d: -f1) --text
    fi
}
alias gstashow='gstas'

# save and retrieve stash by name
gstasave() {
        git stash push -m "saved_stash_name_$1"
}
gstaget() {
    STASH_TO_APPLY=$(git stash list | fzf)
    if [ ! -z "$STASH_TO_APPLY" ]; then
        git stash apply $(echo $STASH_TO_APPLY | cut -d: -f1)
    fi
}

#apply specific stash (in this case 1) without removing it: git stash apply stash@{1}
#create branch from stash and pop it: git stash branch <name> stash@{1}

alias grmt='git rm -r --cached .' # remove locally tracked files. use gaa after to track files not ignored
grmtgi () {
	git rm --cached `git ls-files -ic --exclude-from=.gitignore`
}

alias gmlr='gcol && gl && gcol && gml' #merge previous branch
alias gmdr='gcod && gl && gcol && gml' # TODO: this could be done better probably
alias grbdr='gcod && gl && gcol && grbl'

alias gciq='git add --all && git commit -m "quick commit!"'
alias gcic='git add --all && git commit -m "quick commit!"'
alias gqic='git add --all && git commit -m "quick commit!"'
alias gqiq='git add --all && git commit -m "quick commit!"'
alias cinotes='git add --all && git commit -m "notes commit" && git push'

alias gcreatepatch='git format-patch -1 HEAD' # creates patch from latest commit
# to apply: git am < FILE.patch

gurl() {
    if [[ "$(git config --get remote.origin.url)" == *"gitlab"* ]]; then
        MR_URL=$(cat ~/.cache/gitpush-out.txt | grep "https://" | cut -c 11-)
        echo "Opening $MR_URL"
        start $MR_URL
        # https://gitlab.lessor.dk/microservice/hr-service/-/merge_requests/new?merge_request%5Bsource_branch%5D=story%2FDL-9945-Optimize-architecture-call-Danl%C3%B8n-directly&merge_request%5Bsource_project_id%5D=107&merge_request%5Btarget_branch%5D=develop&merge_request%5Btarget_project_id%5D=107
    else
        PREFIX='https://dev.azure.com'
        REMOTE=$(git config --get remote.origin.url | cut -c 26-)
        REMOTE_BEFORE_GIT=$(echo "$REMOTE" | awk -F '/' '{print $1"/"$2}')
        GIT='_git'
        REMOTE_AFTER_GIT=$(echo "$REMOTE" | awk -F '/' '{print $3}')
        POSTFIX="pullrequestcreate?sourceRef=$(cur_br)^&targetRef=$(git_develop)"
        URL="$PREFIX/$REMOTE_BEFORE_GIT/$GIT/$REMOTE_AFTER_GIT/$POSTFIX"
        echo "$URL"
        cmd /c start "$URL"
    fi
}

# Operations like reset ^HEAD --hard or rebase can remove commits.
# If you did not mean to remove a commit, it can be rescued via commands below.
# Once you have the hash, you can do a git show to see the diff, or a checkout, cherry-pick,
# or merge depending on how you want to get the change back into your history.
# For instance: Can get commit back by running: git merge <HASH>
alias gref='git reflog' # see record of when tip of branches are updated
alias grefa='git reflog --all' # More info
alias glost='git fsck --lost-found' # search for dangling commits / trees

# opens all unstaged files
alias gfix='$EDITOR `git diff --name-only | uniq`'

# Find out which pattern / .gitignore file is ignoring a file
#git check-ignore -v <some-ignored-file>

# Checkout all branches from remote at once. Credits: https://gist.github.com/octasimo/66f3cc230725d1cf1421
#for branch in `git branch -a | grep remotes | grep -v HEAD | grep -v master `; do
#   git branch --track ${branch#remotes/origin/} $branch
#done

# To debug git cli problems:
#GIT_CURL_VERBOSE=1 GIT_TRACE=1 <command> # eg: git pull

# to get quick archive of repo: 
# - as zip: git archive HEAD --format=zip > archive.zip
# - as tar.gz: git archive HEAD | gzip > archive.tar.gz

