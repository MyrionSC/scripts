#!/usr/bin/env bash

# add following lines to ~/.bashrc:
# if [ -f ~/bin/aliases ]; then
#     . ~/bin/aliases
# fi

# Autocompletion
if [ -f ~/bin/.autocomplete.sh ]; then
    . ~/bin/.autocomplete.sh
fi


PATH=$PATH:~/bin
PATH=$PATH:~/bin/bin
PATH=$PATH:~/.local/bin

export NUC=marand@marand.dk
export WEB=/var/www/html

#set -o vi
bind -m vi-insert "\C-l":clear-screen
# ctrl-space is bind <leader> for now
bind '"\C- f":"$(fzf --height 15)"'
bind '"\C- v":"vim $(fzf --height 15)\n"'
#bind '"\C-r":"ls"'

alias ll='ls -alFh'
alias la='ls -Ah'
alias lt='ls -th'
alias l='ls -CFh'
alias lf='ls -th | head -1'

alias mv='mv -i'
alias cp='cp -i'

alias pgrep='pgrep -f -l'
alias pkill='pkill -s 9 -f'
alias ps='ps aux'

alias ai='sudo apt install'
alias au='sudo apt update'
alias aug='sudo apt upgrade'
alias ar='sudo apt remove'
alias aar='sudo apt autoremove'

al () {
    apt list "*$1*"
}
ali () {
    apt list --installed "*$1*"
}

alias ase='apt search'
alias ash='apt show' # apt show pckgname - shows information about a package
alias av='apt-cache policy'

alias ni='npm install'
alias nrm='npm remove'
alias ns='npm start'
alias nr='npm run'
alias nre='npm run env'

alias df='df -Th'
alias writer='lowriter'
alias work='cd ~/winhome/work'
alias notes='cd ~/notes'
alias todo='start https://docs.google.com/document/d/153zkJW6oph4Av4q495SS5dufi3Z5L79GP6koM0jKI1w/edit#'

# platform specific stuff
if [[ "$(uname)" == "Darwin" ]]; then # It's a Mac!
    echo mac
    alias dl='cd ~/Downloads'
    alias desk='cd ~/Desktop'
    alias xc='pbcopy'
    alias xpaste='pbpaste'
    export DL=~/Downloads
    export DESK=~/Desktop
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then # It's Good ol' Linux or WSL!
    if [ $(uname -r | sed -n 's/.*\( *Microsoft *\).*/\1/ip') ];
    then # WSL
        # if not done, create symlink in ~ pointing to windows user home called 'winhome'
        copy_ip () {
            hostname -I | awk '{print $1}' | awk '{printf "%s", $0}' | clip.exe
        }
        alias cmd='cmd.exe'
        alias open='cmd.exe /C start'
        alias start='cmd.exe /C start'
        alias clip='clip.exe'
        alias winhome='cd ~/winhome'
        alias wh='cd ~/winhome'
        alias xc='clip.exe'
        alias dl='cd ~/winhome/Downloads'
        alias desk='cd ~/winhome/Desktop'
        #alias gurl="egrep -o 'https?://[^ ]+' ~/.cache/gitpush-out.txt | xargs -I {} cmd.exe /C start {} > /dev/null 2>&1"
        alias osite="egrep -o 'https?://[^ ]+'| tr -d '' | xargs cmd.exe /C start" # opens siteurl from std/in
        alias gitg='cmd.exe /C "C:\Program Files\gitg\bin\gitg.exe"' # opens gitgui in current dir
        alias cset='cmd.exe /C set'
        alias csetx='cmd.exe /C setx'
        alias node='cmd.exe /c node'
        alias npm='cmd.exe /c npm'
        alias dotnet='cmd.exe /c dotnet'
        alias gradlew='cmd.exe /c gradlew'
        alias es='cmd.exe /c es'
        rider () {
            if [ $# -eq 0 ]
            then
                cmd.exe /c "C:\\Users\\Martin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\JetBrains Toolbox\\Rider.lnk" &
            else
                cmd.exe /c "C:\\Users\\Martin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\JetBrains Toolbox\\Rider.lnk" $1 &
            fi
        }
        webstorm () {
            if [ $# -eq 0 ]
            then
                cmd.exe /c "C:\\Users\\Martin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\JetBrains Toolbox\\Webstorm.lnk" &
            else
                cmd.exe /c "C:\\Users\\Martin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\JetBrains Toolbox\\Webstorm.lnk" $1 &
            fi
        }
        delenv () {
            if [ $# -eq 0 ]
            then
                ARG=$(cmd /c set | fzf | awk -F '=' '{print $1}')
            else
                ARG="$1"
            fi
            cmd /C "REG delete HKCU\Environment /F /V $ARG"
            echo "Removing $ARG. If success, remember to restart entire terminal."
        }
        alias regdel='delenv'
        alias delreg='delenv'
        export DL=~/winhome/Downloads
        export DESK=~/winhome/Desktop
    else # It actually is linux
        alias dl='cd ~/Downloads'
        alias desk='cd ~/Desktop'
        alias xc='xclip -selection c' # example: pwd | xc
        alias open='xdg-open'
        alias xpaste='xclip -selection clipboard -o'
        export DL=~/Downloads
        export DESK=~/Desktop
    fi
fi

# misc stuff
alias cmux='sudo chmod u+x'
alias rsync='rsync -arvzP'
alias drivemount='google-drive-ocamlfuse' # first arg: mountdir
alias unmount='fusermount -u' # first arg: mountdir
alias rb='. ~/.bashrc'
alias rbc='. ~/.bashrc'
alias breset='. ~/.bashrc'
alias sourcebrc='. ~/.bashrc'
alias vact='. $(pwd)/venv/bin/activate'
alias tarzip='tar -cvf' # args: TARNAME FILES
alias tarunzip='tar -xvf' # args: TARNAME

wordcount () {
    echo $1 | wc --words -
}
trspace () {
    echo "$@" | tr " " "_"
}
arrayify () {
    echo "[$@]" | tr "\n" ", " # cut off last two chars at some point
}
trupper () {
    echo "$@" | tr '[:lower:]' '[:upper:]'
}
trlower () {
    echo "$@" | tr '[:upper:]' '[:lower:]'
}

trim() {
    #local var="$*"
    read var # from pipe
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}


sgrep () {
    grep -irn "$1" .
}
greps () {
    grep -irn "$1" .
}

winpath () {
    cmd /c path | sed 's/;/\n/g' | fzf
}
winpwd () {
    cmd /c echo %cd%
}

# Copy windows path of dir/file
winxp () {
    if [ -z "$1" ]; then
        P=$(realpath .)
    else
        P=$(realpath $1)
    fi
    P=$(echo $P | sed -e 's/\//\\/g' | sed -e 's/\\mnt\\c/C:/')
    echo "copied $P"
    echo -n $P | clip
}
alias pc="winxp"

xp () {
    if [ $# -eq 0 ]
    then
        realpath . | tr -d "\n" | xc
    else
        realpath $1 | tr -d "\n" | xc
    fi
}


cac () {
    cat $1 | xc
}

alias linuxv='cat /etc/*-release'

#navigation aliases
alias ca='cd ..'
alias caa='cd ../..'
alias caaa='cd ../../..'
alias caaaa='cd ../../../..'
alias caaaaa='cd ../../../../..'
alias caaaaaa='cd ../../../../../..'
alias caaaaaaa='cd ../../../../../../..'
alias caaaaaaaa='cd ../../../../../../../..'
alias caaaaaaaaa='cd ../../../../../../../../..'
alias caaaaaaaaaa='cd ../../../../../../../../../..'
alias caaaaaaaaaaa='cd ../../../../../../../../../../..'
alias cb='cd -'

#alias cdf='cd $(ls -d ./*/ | head -1)' # enter first dir
#alias cdl='cd $(ls -dr ./*/ | head -1)' # enter last dir
alias cdl='cd $(ls -t | head -1)'

alias bin='cd ~/bin'
alias www='cd /var/www/html/'

#search aliases
# trying out https://github.com/sharkdp/fd for now
# findall () {
#     find . -iname "*$1*"
# }
# fd () {
#     find . -type d -iname "*$1*"
# }
alias fda='fd --hidden'

cdd() { # try to cd to a dir match
    DIRS=$(find . -type d -iname "*$1*")
    NUM=$(echo -n "$DIRS" | grep -c '^')
    if [ $NUM -eq 0 ]; then
        echo did not match any dirs
    elif [ $NUM -eq 1 ]; then
        cd $DIRS
    else
        echo Matched more than one dir:
        for dir in $DIRS
        do
            echo $dir
        done
    fi
}
alias cfd='cdd'
finddir () {
    find . -type d -iname "*$1*"
}

ff () {
    find . -type f -iname "*$1*"
    #rg --hidden --files -g "*$1*"
}
findfile () {
    find . -type f -iname "*$1*"
    #rg --hidden --files -g "*$1*"
}
ffreg () {
    if [ $# -eq 0 ]
    then
        echo 'regex find from current dir. input1 must be in quotation and you need to specify .*/ in the beginning because find matches the whole path. eg to find all files ending with .log: ".*\.log$"'
    else
        find . -regextype sed -regex $1
    fi
}
findlib () {
    if [ $# -eq 0 ]
    then
        ldconfig -p
    else
        ldconfig -p | grep -i $1
    fi
}
# can also use locate PATTERN to find a file on the system (much faster)
findcore () { # search EVERYWHERE # can also use locate for this
    sudo find /bin /lib /lib64 /snap /usr /etc /opt /sbin /var /home -iname "*$1*"
}

alias countfiles='find . -type f | wc -l'
alias countdirs='find . -maxdepth 1 -type d | wc -l'

# list, move, copy, open latest modified file / dir in current dir
lst() {
    if [ $# -eq 0 ]
    then
        ls -t | head -1
    else
        ls -t | head -$1
    fi
}
vlst() {
    vim $(lst)
}
alias vimlst='vlst'
mvl () {
    if [ $# -eq 1 ]
    then
        mv -i -v $(lst) $1
    else
        mv -i -v $(lst $1) $2
    fi
}
cpl () {
    if [ $# -eq 1 ]
    then
        cp -ir $(lst) $1
    else
        cp -ir $(lst $1) $2
    fi
}
ol () {
    open $(lst)
}

alias fori="for ((I=0;;I++)) do"

#====== Vim stuff
# wrapper for vim that allows to use previously captured keys by terminal like c-s for mappings
vim () {
    stty -ixon;
    command vim "$@";
    stty ixon;
}
vi () {
    stty -ixon;
    command vim "$@";
    stty ixon;
}

export VISUAL=vim
export EDITOR="$VISUAL"
alias evim="vim ~/.vimrc"
alias evimrc="vim ~/.vimrc"
alias viml="vim $(lst)"

ffv () {
    vim $(rg --hidden --files -g "*$1*")
}
ffrm () {
    rm $(rg --hidden --files -g "*$1*")
}
rgv () {
    rg --vimgrep "$1" > vim_quickfix_list
    vim -q vim_quickfix_list
    rm vim_quickfix_list
}
rgvim () {
    rg --vimgrep "$1" > vim_quickfix_list
    vim -q vim_quickfix_list
    rm vim_quickfix_list
}
# read about navigation via quickfix with 'docs vim'

# quickly search aliases
als () {
    if [ $# -eq 0 ]
    then
        cat ~/bin/aliases
    else
        cat ~/bin/aliases | grep -i "$@"
    fi
}
if [ -f ~/bin/git_aliases ]; then
    . ~/bin/git_aliases
    alias egitals='vim ~/bin/git_aliases'

    gitals () {
        if [ $# -eq 0 ]
        then
            cat ~/bin/git_aliases
        else
            cat ~/bin/git_aliases | grep -i $1
        fi
    }
fi
if [ -f ~/bin/azure/aliases ]; then
    . ~/bin/azure/aliases
    alias eaz='vim ~/bin/azure/aliases'
fi

# drive aliases
alias eals='vim ~/bin/aliases'
alias ebrc='vim ~/.bashrc'
alias ezrc='vim ~/.zshrc'


dragon-say () {
echo $1 | cowsay -e OO -f dragon-and-cow
}


#shopt -s globstar

#fasd init. Try different setups from "man fasd"
# eval "$(fasd --init auto)"
# alias v='f -e vim' # quick opening files with vim
# c () {
#     echo "copied $(f $@) to clipholder"
#     f -e cat $@ | tr -d '\n' | xc
# }
# o () {
#     echo "opening $(f $@)"
#     f -e open $@ & disown
# }

binrg() { # search in bin
    rg "$@" ~/bin
}
rgbin() { # search in bin
    rg "$@" ~/bin
}


# documents
alias books='open https://docs.google.com/document/d/1Kz8ryAhjm8AHjcVO956MMFzlwhvrF84n0x21UVvmjA0/edit'
alias activities='open https://docs.google.com/document/d/1mKbc0Or2XXEoOD5FeBMuv4sDaxz_Gfh8pwBtoabJrfU/edit'
alias career='open https://docs.google.com/document/d/191BaYenDZRrsV5F8JS0t0LbSyWddEC1dGhrqj7DGfkk/edit'
alias friends='open https://docs.google.com/document/d/1MwawZDJWUjvCwoLIukIJlS-L3Czc9gCQTti04PZSLII/edit'
alias wishlist='open https://docs.google.com/document/d/1GapiFZZXzOXmDn1hb6Uy4f_jUxMTnPr3b2jAlHL06ag/edit'
alias hours='open https://docs.google.com/spreadsheets/d/1Z-3PQJbS1fUwjIs86l6sh5ffAfT7gtQz6pg7tfYzE2I/edit'

# cat ssh config
alias sshc='cat ~/.ssh/config'
alias sshconf='cat ~/.ssh/config'
alias esshc='vim ~/.ssh/config'
alias esshconf='vim ~/.ssh/config'

# shell timers
countdown(){
    date1=$((`date +%s` + $1));
    while [ "$date1" -ge `date +%s` ]; do
        echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
        sleep 0.1
    done
}
stopwatch(){
    date1=`date +%s`;
    while true; do
        echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
        sleep 0.1
    done
}
alarm(){
    countdown $1 && open ~/bin/bin/alarm.wav
}

# google search for string
gsearch() {
    if [ $# -eq 0 ]
    then
        echo "first arg must be search string"
    else
        google-chrome "https://www.google.com/search?q=$(echo $1 | tr ' ' '+')"
    fi
}

# start static file httpserver in current dir. Arg1: port
simpleserver(){
    python3 -m http.server $1
}
httpserver(){
    python3 -m http.server $1
}

uuid() {
    python3 -c 'import uuid; print(str(uuid.uuid4()))'
}
guid() {
    python3 -c 'import uuid; print(str(uuid.uuid4()))'
}

# replace space in file names with underscore
rename_space_underscore() {
    for arg in "$@"
    do
        mv "$arg" $(echo $arg | tr " " "_")
        echo $arg renamed to: $(echo $arg | tr " " "_")
    done
}

# replace space with underscore normal input
tr_underscore(){
    echo "$@" | tr " " "_"
}

alias scanlocal='sudo nmap -sn 192.168.87.0/24'

viewlog() {
    less +F ~/logs/$1
}

# Print Len of input
strlen() {
    strlenargs="$@"
    echo ${#strlenargs}
}

alias rg='rg -M 400'
alias less='less +F' # real time update on file

# fzf scripts
if [ -f ./fzf-scripts.sh  ]; then
    source ./fzf-scripts.sh
fi

# history
alias ghist='cat ~/.bash_history | grep'
alias ehist='vim ~/.bash_history'

# zsh shell aliases
alias d='dirs -v | head -10'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'
# alias -g G='| grep -i' # Bash can't handle this



# === docker
#alias dock-enter='docker exec -it todo bash'

# Most of functions below copied from github user jgrodziski docker-aliases.sh gist
function dnames-fn {
	for ID in `cmd.exe /c docker ps | awk '{print $1}' | grep -v 'CONTAINER'`
	do
    	cmd.exe /c docker inspect $ID | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
	done
}

function dip-fn {
    echo "IP addresses of all named running containers"
    for DOC in `dnames-fn`
    do
        IP=`cmd.exe /c docker inspect $DOC | grep -m3 IPAddress | cut -d '"' -f 4 | tr -d "\n"`
        OUT+=$DOC'\t'$IP'\n'
    done
    echo $OUT|column -t
}

function dex-fn {
	cmd.exe /c docker exec -it $1 ${2:-bash}
}

function di-fn {
	cmd.exe /c docker inspect $1
}

function dl-fn {
	cmd.exe /c docker logs -f $1
}

function drun-fn {
	cmd.exe /c docker run -it $1 $2
}

function dsr-fn {
	cmd.exe /c docker stop $1;cmd.exe /c docker rm $1
}

function drmc-fn {
       cmd.exe / c docker rm $(cmd.exe /c docker ps --all -q -f status=exited)
}

function drmid-fn {
       cmd.exe /c docker rmi $(cmd.exe /c docker images -q -f dangling=true)
}

#     dex <container>: execute a bash shell inside the RUNNING <container> #
#     di <container> : docker inspect <container>                          #
#     dim            : docker images                                       #
#     dip            : IP addresses of all running containers              #
#     dl <container> : docker logs -f <container>                          #
#     dnames         : names of all running containers                     #
#     dps            : docker ps                                           #
#     dpsa           : docker ps -a                                        #
#     drmc           : remove all exited containers                        #
#     drmid          : remove all dangling images                          #
#     drun <image>   : execute a bash shell in NEW container from <image>  #
#     dsr <container>: stop then remove <container>                        #
alias dex=dex-fn
alias di=di-fn
alias dim="docker images"
alias dimr='docker rmi'
alias dip=dip-fn
#alias dl=dl-fn
alias dnames=dnames-fn
alias dps="docker ps"
alias dpsa="docker ps -a"
alias drmc=drmc-fn
alias drmid=drmid-fn
alias dimrd=drmid-fn
alias drun=drun-fn
alias dsp="docker system prune --all"
alias dsr=dsr-fn

alias dc="docker-compose"
alias dcu="docker-compose up -d --remove-orphans"
alias dcd="docker-compose down --remove-orphans"
alias dcdu="docker-compose down --remove-orphans && docker-compose up -d"

dbash () {
    docker exec -it "$1" /bin/bash
}


# cat ide search replace patterns
alias idesrp="cat ~/bin/ide-config/jetbrains/search-replace-patterns"

alias jvu="sudo update-alternatives --config java"


# find files in parent dirs
find-up () {
  path=$(pwd)
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  echo "$path"
}
egiti() {
    path="$(find-up .gitignore)/.gitignore"
    vim $path
}
alias giti='egiti'

alias dclean='dotnet clean'
alias drun='dotnet run'


# autohotkey
ahk () { # edit and launch autohotkey script
    AHK_FILE_DIR=~/winhome/autohotkey
    if [ -z "$1" ]; then
        echo "First arg should be name of autohotkey script that should be executed (tab for completion, remember .ahk ending)"
        echo "If first arg is -e flag: edit file instead"
        echo "Files end up in $AHK_FILE_DIR dir"
        return
    fi

    # create / edit script if -e flag
    if [ "$1" == "-e" ]; then
        shift
        mkdir -p $AHK_FILE_DIR
        # if file does not exist, create from template
        [ ! -f $AHK_FILE_DIR/$1 ] && echo "Creating new file from template" && cp ~/bin/autohotkey/template.ahk $AHK_FILE_DIR/$1
        vim $AHK_FILE_DIR/$1
        return
    fi

    # execute script
    cmd /c autohotkey.exe %USERPROFILE%\\autohotkey\\$1 & # does not seem to quit if terminal is shut down
}

# === persistent history, credits to https://eli.thegreenplace.net/2013/06/11/keeping-persistent-history-in-bash
export HISTTIMEFORMAT="%F %T  " # changes history format to include datetime
log_bash_persistent_history()
{
  [[
    $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$
  ]]
  local date_part="${BASH_REMATCH[1]}"
  local command_part="${BASH_REMATCH[2]}"
  if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]
  then
    echo $date_part "|" "$command_part" >> ~/.persistent_history
    export PERSISTENT_HISTORY_LAST="$command_part"
  fi
}

# Stuff to do on PROMPT_COMMAND
run_on_prompt_command()
{
    log_bash_persistent_history
}

PROMPT_COMMAND="run_on_prompt_command"

# keybinding to search in persistent history
__fzf_persistent_history__() {
  local output
  output=$(tac ~/.persistent_history | fzf --no-sort | cut -c 23-)
  # below put output on prompt
  READLINE_LINE=${output#*$'\t'}
  if [ -z "$READLINE_POINT" ]; then
    echo "$READLINE_LINE"
  else
    READLINE_POINT=0x7fffffff
  fi
}
# bind to ctrl-p because alt-r is taken
bind -m emacs-standard -x '"\C-p": __fzf_persistent_history__'
bind -m vi-command -x '"\C-p": __fzf_persistent_history__'
bind -m vi-insert -x '"\C-p": __fzf_persistent_history__'

# register hook that saves last pwd to cachefile
LASTPWD=~/.cache/last-pwd.txt
typeset -g CHPWD_COMMAND=""
_chpwd_hook() {
  echo "$PWD" > "$LASTPWD"
}
PROMPT_COMMAND="_chpwd_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"

# start at last dir
if [ -f $LASTPWD ]; then
    cd $(cat "$LASTPWD")
fi

alias isodate='date -u +"%Y-%m-%dT%H:%M:%S%Z"'

mockpile() {
    powershell.exe -command "Get-Clipboard" > ~/winhome/.cache/mockpileinput.json
    ~/winhome/bin/mockpilercli.exe "C:\\Users\\mar\\.cache\\mockpileinput.json"
}

sqlite_from_json() {
    if [ -z "$1" ]; then
        echo taking json from clipboard
        powershell.exe -command "Get-Clipboard" > ~/winhome/.cache/sqlite_json.json
    else
        echo copy from file
        cp -f $1 ~/winhome/.cache/sqlite_json.json
    fi

    cd ~/winhome/.cache
    echo === starting sqlitebiter jsonparse
    cmd /c sqlitebiter file sqlite_json.json
    echo === sqlitebiter jsonparse done
    cmd /c "C:\\Users\\mar\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Rider\\ch-0\\213.6461.51\\bin\\rider" out.sqlite
    cd -
}
sqlite_from_sql() {
    powershell.exe -command "Get-Clipboard" > ~/winhome/.cache/sqlite_from_sql_cache.sql
    if [ -f ~/winhome/.cache/temp.db ]; then
        rm ~/winhome/.cache/temp.db
    fi
    sqlite ~/winhome/.cache/temp.db < ~/winhome/.cache/sqlite_from_sql_cache.sql
    cd ~/winhome/.cache
    cmd /c rider temp.db
    cd -
}

# list processes and kill one
pskill() {
    P_TO_KILL=$(cmd /c pslist | fzf | awk '{print $1}')
    [ -z "$P_TO_KILL" ] && return
    ALL_P_PID=$(cmd /c pslist | grep -i "$P_TO_KILL" | awk '{print $2}')
    for PID in $ALL_P_PID; do
        cmd /c pskill $PID
    done
}
alias pk='pskill'
alias psk='pskill'

alias sysvar='cmd /c rundll32 sysdm.cpl,EditEnvironmentVariables'
alias path='cmd /c rundll32 sysdm.cpl,EditEnvironmentVariables'
alias epath='cmd /c rundll32 sysdm.cpl,EditEnvironmentVariables'
alias setpath='cmd /c rundll32 sysdm.cpl,EditEnvironmentVariables'

alias setf='cmd /c set | fzf'

# quick z navigation
zz () {
    if [ "$#" -gt 0 ]; then
        TO_PATH=$(z | awk '{print $2}' | tac | fzf --height 30 --query "$@")
    else
        TO_PATH=$(z | awk '{print $2}' | tac | fzf --height 30)
    fi

    # if not empty, go to path
    if [ ! -z "$TO_PATH" ]; then
        cd $TO_PATH
    fi
}

watchexec() {
    if [ -z "$1" ]; then
        tldr watchexec
        return
    fi
    if $(pwd -P | grep -q "^\/mnt\/c\/*"); then
        cmd /c watchexec "$@"
    else
        watchexec "$@"
    fi
}
pywatch() {
    if [ -z "$1" ]; then
        echo "first arg must be python file followed by optional args"
        return
    fi
    if $(pwd -P | grep -q "^\/mnt\/c\/*"); then
        cmd /c watchexec -c -- python "$@"
    else
        watchexec  -c -- python "$@"
    fi
}

# apt install trash-cli. trash ends up in ~/.local/share/Trash/. use trash-list to list. trash-restore to restore.
rm() {
    trash "$@"
}

docssearch() {
    if [ -z "$1" ]; then
        "first arg to docssearch should be search rg term"
        return
    fi
    rg "$@" ~/bin/documentation
}
alias ds="docssearch"

# bin search
rgb () {
    rg "$@" ~/bin
}
alias bs="rgb"
alias plist="tasklist.exe"
alias tf="terraform.exe"

# lightblue colors for dirs, which removes annoying background in windows part of fs
# run: dircolors -p | sed 's/;42/;01/' > ~/.dircolors
#LS_COLORS=$LS_COLORS:'di=1;34:' ; export LS_COLORS

actionlist() {
    cat ~/bin/datafiles/ideavim-actionlist.txt | fzf
}

