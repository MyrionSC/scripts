
# === User management (has to be sudo)

# create user with home (do not use useradd, which sets default shell to sh. adduser sets to bash)
adduser USERNAME

# create new group GROUP
sudo groupadd GROUP

# Add existing user USER to existing group GROUP
sudo usermod -a -G GROUP USER

# See groups of user USER
groups USER


# === Debugging connections
ss -lnt # see which ports are exposed
ss -tulpn # and more
sudo netstat -tulpn | grep LISTEN # list open ports

# use ssh creds and settings on remote. Can be used to transfer files directly between two remotes
ssh -A REMOTE

# === ssh tunnel / portforward
# bind local port 4000 to remote port 3000
# -N: Do not start a shell
ssh -v -N marand -L 4000:localhost:3000

# === reverse ssh tunnel / portforward
# bind remote port 8080 to local port 8000
# from ssh man: -R [bind_address:]port:host:hostport
# \* = all interfaces
ssh -v -N -R \*:8080:localhost:8000 marand

# IMPORTANT: On server, need to set GatewayPorts clientspecified
#   in /etc/ssh/sshd_config and restart sshd: systemctl restart sshd


# marand looks like this in .ssh/config
Host marand
    HostName 157.90.255.75
    User marand


# === Systemd Cheatsheet
systemctl start [name.service]
systemctl stop [name.service]
systemctl restart [name.service]
systemctl reload [name.service]
systemctl status [name.service]
systemctl is-active [name.service]
systemctl list-units --type service --all

systemd has 12 unit types. .service is system services, and when you’re running any of the above commands you can leave off the .service extension, because systemd assumes a service unit if you don’t specify something else. The other unit types are:

Target: group of units
Automount: filesystem auto-mountpoint
Device: kernel device names, which you can see in sysfs and udev
Mount: filesystem mountpoint
Path: file or directory
Scope: external processes not started by systemd
Slice: a management unit of processes
Snapshot: systemd saved state
Socket: IPC (inter-process communication) socket
Swap: swap file
Timer: systemd timer.

# systemd .service file location, from https://linuxconfig.org/how-to-create-systemd-service-unit-in-linux
There are basically two places in the filesystem where systemd service units are installed:
/usr/lib/systemd/system and /etc/systemd/system.
The former path is used for services provided by installed packages,
while the latter can be used by the system administrator for its own services which can override the default ones.

# example systemd file (which runs python script): myservice.service
[Unit]
Description=Description of your service
After=network.target

[Service]
Type=simple
ExecStart=/usr/bin/python3 /abs/path/to/script.py --arg argvalue
StandardOutput=file:/abs/path/to/logfile.log
StandardError=file:/abs/path/to/logfile.log
Restart=always # restart when server restarts

[Install]
WantedBy=multi-user.target

# after file creation, reload systemctl
sudo systemctl daemon-reload

# to activate and then start new service
sudo systemctl enable myservice.service && sudo systemctl start myservice.service

# to allow USER to start / stop / restart new service
edit /etc/sudoers with: sudo EDITOR=vim visudo
%USER ALL=(ALL) NOPASSWD: /bin/systemctl start myservice.service
%USER ALL=(ALL) NOPASSWD: /bin/systemctl stop myservice.service
%USER ALL=(ALL) NOPASSWD: /bin/systemctl restart myservice.service

now USER can for instance restart service via ssh: ssh host "sudo systemctl restart myservice.service"

# === libraries

Software libraries can be linked in two ways:
- Statically: Built into binary
- Dynamically: In filesystem. Requested at runtime. Often Shared by multiple programs.

To list shared libraries for a binary (eg. ls):
ldd /bin/ls

# Install a library manually

1. Copy the file into /usr/lib
2. run: ldconfig -n -v /usr/lib
  - creates links and cache, stored in /etc/ld.so.conf and trusted dirs /lib and /usr/lib
  - Used by runtime linker ld.so or ld-linux.so

ldconfig checks the header and filenames of the libraries it encounters when determining which versions should have their links updated.
ldconfig  will attempt to deduce the type of ELF libs (i.e., libc5 or libc6/glibc) based on what C libs, if any, the library was linked against.

# Use ldd to identify missing libraries
ldd path/to/binary.so | grep "not found"

# check if library exists
ldconfig -p | grep -i libxss

# search for / install library on apt (should link itself)
apt search libxss
sudo apt install libxss1

# print symbols in library with nm
nm -D /lib/x86_64-linux-gnu/libc.so.6

# === Find files on linux
apt install mlocate
run: updatedb
locate FILENAME

# install deb file. binaries will probably end up in /usr/bin
dpkg -i FILE.deb


# === firewall
ufw enable
ufw status verbose # check status
ufw allow 22/tcp # allow ssh
ufw allow http # allow http
ufw allow https # allow https
sudo ufw allow 53 # allow tcp/udp on port 53
#see https://www.cyberciti.biz/faq/how-to-open-firewall-port-on-ubuntu-linux-12-04-14-04-lts/ for more




