#!/usr/bin/env python3

import os
import sys

def print_instructions():
    print("Tries to camelcase a string containing english words")
    print("first arg should be a string")

if len(sys.argv) < 2:
    print_instructions()
    exit()

inputstring = sys.argv[1].replace("-","").replace("_","").lower()
out = []

scriptpath = os.path.dirname(os.path.realpath(__file__))
words = [w.strip() for w in open(scriptpath + "/../english-word-files/50000_common_words_ranked2.txt", "r").readlines()]
wordsDict = {}
for w in words:
    arr = w.split()
    wordsDict[arr[0]] = int(arr[1])

def findLongestWord(content):
    longestWord = ""
    endIdx = 0
    while endIdx <= len(content):
        if content[:endIdx] in wordsDict:
            longestWord = content[:endIdx]
        endIdx = endIdx + 1
    # if longestWord != "":
    #     print(longestWord, len(longestWord), wordsDict[longestWord])
    return longestWord

def compute(content):
    longestWord = findLongestWord(content)
    if longestWord != "":
        nextLongestWord = findLongestWord(content[len(longestWord):])
        nextlongestWordPrevChar = findLongestWord(content[len(longestWord)-1:])
        if len(nextLongestWord) > 0 and len(nextlongestWordPrevChar) > 0:
            goBackOneChar = wordsDict[nextLongestWord] > wordsDict[nextlongestWordPrevChar]
            if goBackOneChar == True:
                # print("back")
                out.append(longestWord[:-1].capitalize())
                # print(out)
                compute(content[len(longestWord)-1:])
            else:
                # print("stay")
                out.append(longestWord.capitalize())
                # print(out)
                compute(content[len(longestWord):])
        else:
            # print("end")
            out.append(longestWord.capitalize())
            # print(out)
            compute(content[len(longestWord):])
    else:
        out.append(content)


compute(inputstring)
print("".join(out))

# Go forward until found word.
# Keep going until longest word is found
# remove longest word from front of in and add to out with first letter uppercase
# repeat

# if no word found: remove one char from front of input and try again

