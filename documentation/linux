
# === User management (has to be sudo)

# create user with home (do not use useradd, which sets default shell to sh. adduser sets to bash)
adduser USERNAME

# create new group GROUP
sudo groupadd GROUP

# Add existing user USER to existing group GROUP
sudo usermod -a -G GROUP USER

# See groups of user USER
groups USER




# === Debugging connections

# see which ports are exposed
ss -lnt

# something something
nmap -sT -p 8080 me.hr.dev-lessor.dk

# use ssh creds and settings on remote. Can be used to transfer files directly between two remotes
ssh -A REMOTE


# ssh local -> remote portforward with jumphost inbetween
ssh -v -J mar@gcpjh.dev-lessor.dk -L 8280:127.0.0.1:8280 hr

# ssh remote -> local portforward with jumphost inbetween
ssh -v -J mar@gcpjh.dev-lessor.dk -R 8280:127.0.0.1:8280 hr


# === Systemd Cheatsheet
systemctl start [name.service]
systemctl stop [name.service]
systemctl restart [name.service]
systemctl reload [name.service]
systemctl status [name.service]
systemctl is-active [name.service]
systemctl list-units --type service --all

systemd has 12 unit types. .service is system services, and when you’re running any of the above commands you can leave off the .service extension, because systemd assumes a service unit if you don’t specify something else. The other unit types are:

Target: group of units
Automount: filesystem auto-mountpoint
Device: kernel device names, which you can see in sysfs and udev
Mount: filesystem mountpoint
Path: file or directory
Scope: external processes not started by systemd
Slice: a management unit of processes
Snapshot: systemd saved state
Socket: IPC (inter-process communication) socket
Swap: swap file
Timer: systemd timer.

# systemd .service file location, from https://linuxconfig.org/how-to-create-systemd-service-unit-in-linux
There are basically two places in the filesystem where systemd service units are installed:
/usr/lib/systemd/system and /etc/systemd/system.
The former path is used for services provided by installed packages,
while the latter can be used by the system administrator for its own services which can override the default ones.

# example systemd file: myservice.service
[Unit]
Description=Description of your service
After=network.target

[Service]
Type=simple
ExecStart=/path/to/executable
StandardOutput=file:/abs/path/to/logfile
StandardError=file:/abs/path/to/logfile
Restart=on-failure

[Install]
WantedBy=multi-user.target

# to activate new service
sudo systemctl enable myservice.service && sudo systemctl start myservice.service

# to allow USER to start / stop / restart new service
edit /etc/sudoers with: sudo EDITOR=vim visudo
%USER ALL=(ALL) NOPASSWD: /bin/systemctl start myservice.service
%USER ALL=(ALL) NOPASSWD: /bin/systemctl stop myservice.service
%USER ALL=(ALL) NOPASSWD: /bin/systemctl restart myservice.service

now USER can for instance restart service via ssh: ssh host "sudo systemctl restart myservice.service"

# === libraries

Software libraries can be linked in two ways:
- Statically: Built into binary
- Dynamically: In filesystem. Requested at runtime. Often Shared by multiple programs.

To list shared libraries for a binary (eg. ls):
ldd /bin/ls

# Install a library manually

1. Copy the file into /usr/lib
2. run: ldconfig -n -v /usr/lib
  - creates links and cache, stored in /etc/ld.so.conf and trusted dirs /lib and /usr/lib
  - Used by runtime linker ld.so or ld-linux.so

ldconfig checks the header and filenames of the libraries it encounters when determining which versions should have their links updated.
ldconfig  will attempt to deduce the type of ELF libs (i.e., libc5 or libc6/glibc) based on what C libs, if any, the library was linked against.

# Use ldd to identify missing libraries
ldd path/to/binary.so | grep "not found"

# check if library exists
ldconfig -p | grep -i libxss

# search for / install library on apt (should link itself)
apt search libxss
sudo apt install libxss1




